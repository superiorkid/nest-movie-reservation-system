// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  username     String        @unique
  password     String?
  role         Role          @default(USER)
  refreshToken String?       @map("refresh_token")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  reservations Reservation[]

  @@index([email, username, createdAt])
  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model Genre {
  id          Int              @id @default(autoincrement())
  title       String           @unique
  description String?          @db.Text
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  movies      GenresOnMovies[]

  @@index([title])
  @@map("genres")
}

model Movie {
  id              String           @id @default(cuid())
  title           String
  description     String?          @db.Text
  durationMinutes Int              @map("duration_minutes")
  releaseDate     DateTime         @map("release_date")
  language        String
  posterUrl       String           @map("poster_url")
  status          MovieStatus      @default(COMING_SOON)
  genres          GenresOnMovies[]
  showtimes       Showtime[]
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")

  @@index([title, releaseDate, createdAt, status])
  @@map("movies")
}

enum MovieStatus {
  NOW_SHOWING
  COMING_SOON
  ARCHIVED
}

model GenresOnMovies {
  movie   Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId String @map("movie_id")
  genre   Genre  @relation(fields: [genreId], references: [id], onDelete: Cascade)
  genreId Int    @map("genre_id")

  @@id([movieId, genreId])
  @@map("genres_on_movies")
}

model Showtime {
  id               String            @id @default(cuid())
  movie            Movie             @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId          String            @map("movie_id")
  startTime        DateTime          @map("start_time")
  endTime          DateTime          @map("end_time")
  theater          Theater           @relation(fields: [theaterId], references: [id], onDelete: Cascade)
  theaterId        String            @map("theater_id")
  status           ShowtimeStatus    @default(SCHEDULED)
  price            Decimal           @default(0.00)
  seatReservations SeatReservation[]
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  reservations      Reservation[]

  @@index([movieId, theaterId, startTime])
  @@map("showtimes")
}

enum ShowtimeStatus {
  SCHEDULED
  CANCELLED
  COMPLETED
}

model Location {
  id        String    @id @default(cuid())
  city      String
  address   String
  theaters  Theater[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@index([city, address])
  @@map("locations")
}

model Theater {
  id          String     @id @default(cuid())
  name        String
  capacity    Int // number of  total seats
  seatsPerRow Int        @map("seats_per_row")
  showtimes   Showtime[]
  seats       Seat[]
  location    Location?  @relation(fields: [locationId], references: [id], onDelete: SetNull)
  locationId  String?    @map("location_id")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  @@index([name, capacity])
  @@map("theaters")
}

model Seat {
  id               String            @id @default(cuid())
  seatNumber       String            @map("seat_number")
  isActive         Boolean           @default(true)
  isLocked Boolean @default(false)
  lockedUntil DateTime?
  theater          Theater           @relation(fields: [theaterId], references: [id], onDelete: Cascade)
  theaterId        String            @map("theater_id")
  seatPrice        Decimal           @default(0.00) @map("seat_price")
  seatReservations SeatReservation[]
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")

  @@index([seatNumber])
  @@map("seats")
}

model SeatReservation {
  id            String      @id @default(cuid())
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  reservationId String      @map("reservation_id")
  seat          Seat        @relation(fields: [seatId], references: [id], onDelete: Cascade)
  seatId        String      @map("seat_id")
  showtime      Showtime    @relation(fields: [showtimeId], references: [id], onDelete: Cascade)
  showtimeId    String      @map("showtime_id")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  @@unique([seatId, showtimeId])
  @@map("seat_reservations")
}

model Reservation {
  id               String            @id @default(cuid())
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  showtime         Showtime          @relation(fields: [showtimeId], references: [id], onDelete: Cascade)
  showtimeId       String
  totalPrice       Decimal           @default(0.00) @map("total_price")
  status           ReservationStatus @default(PENDING)
  paymentIntentId  String? @map("payment_intent_id") @unique
  paymentMethod    String? @map("payment_method")
  paidAt           DateTime? @map("paid_at")
  seatReservations SeatReservation[]
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")

  @@map("reservations")
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
}
