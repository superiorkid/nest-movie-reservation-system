// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  username     String   @unique
  password     String?
  role         Role     @default(USER)
  refreshToken String?  @map("refresh_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@index([email, username, createdAt])
}

enum Role {
  USER
  ADMIN
}

model Genre {
  id          Int              @id @default(autoincrement())
  title       String           @unique
  description String?          @db.Text
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  movies      GenresOnMovies[]

  @@index([title])
}

model Movie {
  id              String           @id @default(cuid())
  title           String
  description     String?          @db.Text
  durationMinutes Int              @map("duration_minutes")
  releaseDate     DateTime         @map("release_date")
  language        String
  posterUrl       String           @map("poster_url")
  status          MovieStatus      @default(COMING_SOON)
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  genres          GenresOnMovies[]
  showtimes       Showtime[]

  @@index([title, releaseDate, createdAt, status])
}

enum MovieStatus {
  NOW_SHOWING
  COMING_SOON
  ARCHIVED
}

model GenresOnMovies {
  movie   Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId String @map("movie_id")
  genre   Genre  @relation(fields: [genreId], references: [id], onDelete: Cascade)
  genreId Int    @map("genre_id")

  @@id([movieId, genreId])
}

model Showtime {
  id        String   @id @default(cuid())
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId   String   @map("movie_id")
  startTime DateTime @map("start_time")
  endTime   DateTime @map("end_time")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([movieId])
}
